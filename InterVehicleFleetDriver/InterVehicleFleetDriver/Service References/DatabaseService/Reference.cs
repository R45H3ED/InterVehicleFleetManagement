//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace InterVehicleFleetDriver.DatabaseService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageCap", Namespace="http://tempuri.org/")]
    public partial class ImageCap : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ImageIDField;
        
        private int DriverIDField;
        
        private string VehicleNameField;
        
        private System.DateTime DateTimeField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private byte[] ThumbnailField;
        
        private int InterVechIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ImageID {
            get {
                return this.ImageIDField;
            }
            set {
                if ((this.ImageIDField.Equals(value) != true)) {
                    this.ImageIDField = value;
                    this.RaisePropertyChanged("ImageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public int DriverID {
            get {
                return this.DriverIDField;
            }
            set {
                if ((this.DriverIDField.Equals(value) != true)) {
                    this.DriverIDField = value;
                    this.RaisePropertyChanged("DriverID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string VehicleName {
            get {
                return this.VehicleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleNameField, value) != true)) {
                    this.VehicleNameField = value;
                    this.RaisePropertyChanged("VehicleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=3)]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=4)]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=5)]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public byte[] Thumbnail {
            get {
                return this.ThumbnailField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbnailField, value) != true)) {
                    this.ThumbnailField = value;
                    this.RaisePropertyChanged("Thumbnail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=7)]
        public int InterVechID {
            get {
                return this.InterVechIDField;
            }
            set {
                if ((this.InterVechIDField.Equals(value) != true)) {
                    this.InterVechIDField = value;
                    this.RaisePropertyChanged("InterVechID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseService.DatabaseServiceSoap")]
    public interface DatabaseServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetListOfImageCapture", ReplyAction="*")]
        System.IAsyncResult BeginGetListOfImageCapture(InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureRequest request, System.AsyncCallback callback, object asyncState);
        
        InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureResponse EndGetListOfImageCapture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UploadImageCapture", ReplyAction="*")]
        System.IAsyncResult BeginUploadImageCapture(InterVehicleFleetDriver.DatabaseService.UploadImageCaptureRequest request, System.AsyncCallback callback, object asyncState);
        
        InterVehicleFleetDriver.DatabaseService.UploadImageCaptureResponse EndUploadImageCapture(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetListOfImageCaptureRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetListOfImageCapture", Namespace="http://tempuri.org/", Order=0)]
        public InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureRequestBody Body;
        
        public GetListOfImageCaptureRequest() {
        }
        
        public GetListOfImageCaptureRequest(InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetListOfImageCaptureRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public System.DateTime dateTime;
        
        public GetListOfImageCaptureRequestBody() {
        }
        
        public GetListOfImageCaptureRequestBody(System.DateTime dateTime) {
            this.dateTime = dateTime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetListOfImageCaptureResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetListOfImageCaptureResponse", Namespace="http://tempuri.org/", Order=0)]
        public InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureResponseBody Body;
        
        public GetListOfImageCaptureResponse() {
        }
        
        public GetListOfImageCaptureResponse(InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetListOfImageCaptureResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Collections.Generic.List<InterVehicleFleetDriver.DatabaseService.ImageCap> GetListOfImageCaptureResult;
        
        public GetListOfImageCaptureResponseBody() {
        }
        
        public GetListOfImageCaptureResponseBody(System.Collections.Generic.List<InterVehicleFleetDriver.DatabaseService.ImageCap> GetListOfImageCaptureResult) {
            this.GetListOfImageCaptureResult = GetListOfImageCaptureResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadImageCaptureRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="UploadImageCapture", Namespace="http://tempuri.org/", Order=0)]
        public InterVehicleFleetDriver.DatabaseService.UploadImageCaptureRequestBody Body;
        
        public UploadImageCaptureRequest() {
        }
        
        public UploadImageCaptureRequest(InterVehicleFleetDriver.DatabaseService.UploadImageCaptureRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class UploadImageCaptureRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public InterVehicleFleetDriver.DatabaseService.ImageCap ImageData;
        
        public UploadImageCaptureRequestBody() {
        }
        
        public UploadImageCaptureRequestBody(InterVehicleFleetDriver.DatabaseService.ImageCap ImageData) {
            this.ImageData = ImageData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadImageCaptureResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="UploadImageCaptureResponse", Namespace="http://tempuri.org/", Order=0)]
        public InterVehicleFleetDriver.DatabaseService.UploadImageCaptureResponseBody Body;
        
        public UploadImageCaptureResponse() {
        }
        
        public UploadImageCaptureResponse(InterVehicleFleetDriver.DatabaseService.UploadImageCaptureResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class UploadImageCaptureResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool UploadImageCaptureResult;
        
        public UploadImageCaptureResponseBody() {
        }
        
        public UploadImageCaptureResponseBody(bool UploadImageCaptureResult) {
            this.UploadImageCaptureResult = UploadImageCaptureResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DatabaseServiceSoapChannel : InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListOfImageCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListOfImageCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<InterVehicleFleetDriver.DatabaseService.ImageCap> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<InterVehicleFleetDriver.DatabaseService.ImageCap>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadImageCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadImageCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseServiceSoapClient : System.ServiceModel.ClientBase<InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap>, InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap {
        
        private BeginOperationDelegate onBeginGetListOfImageCaptureDelegate;
        
        private EndOperationDelegate onEndGetListOfImageCaptureDelegate;
        
        private System.Threading.SendOrPostCallback onGetListOfImageCaptureCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadImageCaptureDelegate;
        
        private EndOperationDelegate onEndUploadImageCaptureDelegate;
        
        private System.Threading.SendOrPostCallback onUploadImageCaptureCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DatabaseServiceSoapClient() {
        }
        
        public DatabaseServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetListOfImageCaptureCompletedEventArgs> GetListOfImageCaptureCompleted;
        
        public event System.EventHandler<UploadImageCaptureCompletedEventArgs> UploadImageCaptureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap.BeginGetListOfImageCapture(InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetListOfImageCapture(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetListOfImageCapture(System.DateTime dateTime, System.AsyncCallback callback, object asyncState) {
            InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureRequest inValue = new InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureRequest();
            inValue.Body = new InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureRequestBody();
            inValue.Body.dateTime = dateTime;
            return ((InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap)(this)).BeginGetListOfImageCapture(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureResponse InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap.EndGetListOfImageCapture(System.IAsyncResult result) {
            return base.Channel.EndGetListOfImageCapture(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.Collections.Generic.List<InterVehicleFleetDriver.DatabaseService.ImageCap> EndGetListOfImageCapture(System.IAsyncResult result) {
            InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureResponse retVal = ((InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap)(this)).EndGetListOfImageCapture(result);
            return retVal.Body.GetListOfImageCaptureResult;
        }
        
        private System.IAsyncResult OnBeginGetListOfImageCapture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dateTime = ((System.DateTime)(inValues[0]));
            return this.BeginGetListOfImageCapture(dateTime, callback, asyncState);
        }
        
        private object[] OnEndGetListOfImageCapture(System.IAsyncResult result) {
            System.Collections.Generic.List<InterVehicleFleetDriver.DatabaseService.ImageCap> retVal = this.EndGetListOfImageCapture(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListOfImageCaptureCompleted(object state) {
            if ((this.GetListOfImageCaptureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListOfImageCaptureCompleted(this, new GetListOfImageCaptureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListOfImageCaptureAsync(System.DateTime dateTime) {
            this.GetListOfImageCaptureAsync(dateTime, null);
        }
        
        public void GetListOfImageCaptureAsync(System.DateTime dateTime, object userState) {
            if ((this.onBeginGetListOfImageCaptureDelegate == null)) {
                this.onBeginGetListOfImageCaptureDelegate = new BeginOperationDelegate(this.OnBeginGetListOfImageCapture);
            }
            if ((this.onEndGetListOfImageCaptureDelegate == null)) {
                this.onEndGetListOfImageCaptureDelegate = new EndOperationDelegate(this.OnEndGetListOfImageCapture);
            }
            if ((this.onGetListOfImageCaptureCompletedDelegate == null)) {
                this.onGetListOfImageCaptureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListOfImageCaptureCompleted);
            }
            base.InvokeAsync(this.onBeginGetListOfImageCaptureDelegate, new object[] {
                        dateTime}, this.onEndGetListOfImageCaptureDelegate, this.onGetListOfImageCaptureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap.BeginUploadImageCapture(InterVehicleFleetDriver.DatabaseService.UploadImageCaptureRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadImageCapture(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginUploadImageCapture(InterVehicleFleetDriver.DatabaseService.ImageCap ImageData, System.AsyncCallback callback, object asyncState) {
            InterVehicleFleetDriver.DatabaseService.UploadImageCaptureRequest inValue = new InterVehicleFleetDriver.DatabaseService.UploadImageCaptureRequest();
            inValue.Body = new InterVehicleFleetDriver.DatabaseService.UploadImageCaptureRequestBody();
            inValue.Body.ImageData = ImageData;
            return ((InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap)(this)).BeginUploadImageCapture(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        InterVehicleFleetDriver.DatabaseService.UploadImageCaptureResponse InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap.EndUploadImageCapture(System.IAsyncResult result) {
            return base.Channel.EndUploadImageCapture(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private bool EndUploadImageCapture(System.IAsyncResult result) {
            InterVehicleFleetDriver.DatabaseService.UploadImageCaptureResponse retVal = ((InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap)(this)).EndUploadImageCapture(result);
            return retVal.Body.UploadImageCaptureResult;
        }
        
        private System.IAsyncResult OnBeginUploadImageCapture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            InterVehicleFleetDriver.DatabaseService.ImageCap ImageData = ((InterVehicleFleetDriver.DatabaseService.ImageCap)(inValues[0]));
            return this.BeginUploadImageCapture(ImageData, callback, asyncState);
        }
        
        private object[] OnEndUploadImageCapture(System.IAsyncResult result) {
            bool retVal = this.EndUploadImageCapture(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadImageCaptureCompleted(object state) {
            if ((this.UploadImageCaptureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadImageCaptureCompleted(this, new UploadImageCaptureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadImageCaptureAsync(InterVehicleFleetDriver.DatabaseService.ImageCap ImageData) {
            this.UploadImageCaptureAsync(ImageData, null);
        }
        
        public void UploadImageCaptureAsync(InterVehicleFleetDriver.DatabaseService.ImageCap ImageData, object userState) {
            if ((this.onBeginUploadImageCaptureDelegate == null)) {
                this.onBeginUploadImageCaptureDelegate = new BeginOperationDelegate(this.OnBeginUploadImageCapture);
            }
            if ((this.onEndUploadImageCaptureDelegate == null)) {
                this.onEndUploadImageCaptureDelegate = new EndOperationDelegate(this.OnEndUploadImageCapture);
            }
            if ((this.onUploadImageCaptureCompletedDelegate == null)) {
                this.onUploadImageCaptureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadImageCaptureCompleted);
            }
            base.InvokeAsync(this.onBeginUploadImageCaptureDelegate, new object[] {
                        ImageData}, this.onEndUploadImageCaptureDelegate, this.onUploadImageCaptureCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap CreateChannel() {
            return new DatabaseServiceSoapClientChannel(this);
        }
        
        private class DatabaseServiceSoapClientChannel : ChannelBase<InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap>, InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap {
            
            public DatabaseServiceSoapClientChannel(System.ServiceModel.ClientBase<InterVehicleFleetDriver.DatabaseService.DatabaseServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetListOfImageCapture(InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetListOfImageCapture", _args, callback, asyncState);
                return _result;
            }
            
            public InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureResponse EndGetListOfImageCapture(System.IAsyncResult result) {
                object[] _args = new object[0];
                InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureResponse _result = ((InterVehicleFleetDriver.DatabaseService.GetListOfImageCaptureResponse)(base.EndInvoke("GetListOfImageCapture", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadImageCapture(InterVehicleFleetDriver.DatabaseService.UploadImageCaptureRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadImageCapture", _args, callback, asyncState);
                return _result;
            }
            
            public InterVehicleFleetDriver.DatabaseService.UploadImageCaptureResponse EndUploadImageCapture(System.IAsyncResult result) {
                object[] _args = new object[0];
                InterVehicleFleetDriver.DatabaseService.UploadImageCaptureResponse _result = ((InterVehicleFleetDriver.DatabaseService.UploadImageCaptureResponse)(base.EndInvoke("UploadImageCapture", _args, result)));
                return _result;
            }
        }
    }
}
